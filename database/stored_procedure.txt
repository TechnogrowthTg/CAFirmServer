Role:
CREATE PROCEDURE `inserRole`(IN `RoleName` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `role`(`RoleName`,`CreatedDate`,`IsDeleted`) VALUES (RoleName, now(), 1);
CREATE PROCEDURE `getAllRoles`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `RoleId`, `RoleName` FROM `role` WHERE role.IsDeleted=1 ORDER by role.RoleId DESC
CREATE PROCEDURE `getRoleById`(IN `RoleId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `RoleId`, `RoleName` FROM `role` WHERE role.IsDeleted=1 and role.RoleId=RoleId
CREATE PROCEDURE `updateRole`(INOUT `RoleId` BIGINT(15), INOUT `RoleName` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE role SET role.RoleName=RoleName, role.UpdatedDate= CURRENT_TIMESTAMP() WHERE role.RoleId=RoleId
CREATE PROCEDURE `deleteRole`(INOUT `RoleId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE role SET role.IsDeleted=0 WHERE role.RoleId=RoleId

User:
CREATE PROCEDURE `getUserCount`(IN `FirstName` VARCHAR(30), IN `UserEmail` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(user.FirstName and user.UserEmail) as cnt FROM user WHERE user.FirstName=FirstName and user.UserEmail=UserEmail
CREATE PROCEDURE `insertUser`(IN `FirstName` VARCHAR(30), IN `LastName` VARCHAR(30), IN `UserEmail` VARCHAR(50), IN `Gender` VARCHAR(20), IN `Password` VARCHAR(150)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `user`(`FirstName`, `LastName`, `UserEmail`, `Gender`, `Password`, `CreatedDate`,`IsDeleted`) VALUES (FirstName, LastName, UserEmail, Gender, Password, now(),1);
CREATE PROCEDURE `getAllUsers`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `UserId`, `FirstName`, `LastName`, `UserEmail`, `Gender`, `Password` FROM `user` WHERE user.IsDeleted=1 ORDER by user.UserId DESC;
CREATE PROCEDURE `getUserById`(IN `UserId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `UserId`, `FirstName`, `LastName`, `UserEmail`, `Gender`, `Password` FROM `user` WHERE user.IsDeleted=1 and user.UserId=UserId
CREATE PROCEDURE `updateUser`(IN `UserId` BIGINT(15), IN `RoleId` BIGINT(15), IN `FirstName` VARCHAR(30), IN `LastName` VARCHAR(30), IN `UserEmail` VARCHAR(50), IN `Gender` VARCHAR(20), IN `Password` VARCHAR(150)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE user as u JOIN user_log as ul on u.UserId=ul.UserId set u.RoleId=RoleId, ul.RoleId=RoleId, u.FirstName=FirstName, ul.FirstName=FirstName, u.LastName=LastName, ul.LastName=LastName, u.UserEmail=UserEmail, ul.UserEmail=UserEmail, u.Gender=Gender, ul.Gender=Gender, u.Password=Password, ul.Password=Password, u.UpdatedDate = CURRENT_TIMESTAMP(), ul.UpdatedDate = CURRENT_TIMESTAMP() WHERE u.UserId=UserId
CREATE PROCEDURE `deleteUser`(INOUT `UserId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE user SET user.IsDeleted=0 WHERE user.UserId=UserId
CREATE PROCEDURE `userLogin`(IN `UserEmail` VARCHAR(50), IN `Password` VARCHAR(150)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT * FROM `user` INNER JOIN user_role on user.UserId=user_role.UserId WHERE user.UserEmail=UserEmail and user.Password=Password
CREATE PROCEDURE `getUserCount`(IN `FirstName` VARCHAR(30), IN `UserEmail` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(user.FirstName and user.UserEmail) as cnt FROM user WHERE user.FirstName=FirstName and user.UserEmail=UserEmail

UserLog:
CREATE PROCEDURE `insertUserLog`(IN `UserId` BIGINT(15), IN `RoleId` BIGINT(15), IN `FirstName` VARCHAR(30), IN `LastName` VARCHAR(30), IN `UserEmail` VARCHAR(50), IN `Gender` VARCHAR(20), IN `Password` VARCHAR(150)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `user_log`( `UserId`, `RoleId`, `FirstName`, `LastName`, `UserEmail`, `Gender`, `Password`, `CreatedDate`, `IsDeleted`) VALUES (UserId, RoleId, FirstName, LastName, UserEmail, Gender, Password, now(), 1)

UserRole:
CREATE PROCEDURE `insertUserRole`(IN `RoleId` BIGINT(15), IN `UserId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO user_role (RoleId, UserId, CreatedDate, IsDeleted) VALUES (RoleId, UserId, now(), 1)

Client :
DROP PROCEDURE `getClientGroupName`; CREATE DEFINER=`root`@`localhost` PROCEDURE `getClientGroupName`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `GroupId`, `GroupName` FROM `client_group` WHERE client_group.IsDeleted=1 ORDER BY client_group.GroupId DESC
DROP PROCEDURE `insertClient`; CREATE DEFINER=`root`@`localhost` PROCEDURE `insertClient`(IN `GroupId` BIGINT(15), IN `ClientName` VARCHAR(40), IN `ClientEmail` VARCHAR(50), IN `ClientCode` VARCHAR(30), IN `GstNumber` VARCHAR(20), IN `PanNumber` VARCHAR(20), IN `AdharNumber` VARCHAR(20), IN `ClientAddress` VARCHAR(200), IN `TypeOfEntity` VARCHAR(20), IN `CurrentStatus` VARCHAR(20), IN `AgreementStatus` VARCHAR(20), IN `IncorporationDate` DATETIME) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `client`( `GroupId`, `ClientName`, `ClientEmail`, `GstNumber`, `PanNumber`, `AdharNumber`, `ClientAddress`, `TypeOfEntity`, `CurrentStatus`, `AgreementStatus`, `IncorporationDate`, `CreatedDate`, `IsDeleted`) VALUES (GroupId, ClientName, ClientEmail, GstNumber, PanNumber, AdharNumber, ClientAddress, TypeOfEntity, CurrentStatus, AgreementStatus ,IncorporationDate ,now(),1)
DROP PROCEDURE `getAllClient`; CREATE DEFINER=`root`@`localhost` PROCEDURE `getAllClient`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT c.ClientId, cg.GroupName, c.ClientName, c.ClientEmail, c.GstNumber, c.PanNumber, c.AdharNumber, c.ClientAddress, c.TypeOfEntity, c.CurrentStatus, c.AgreementStatus, c.IncorporationDate FROM client as c JOIN client_group as cg on c.GroupId=cg.GroupId WHERE c.IsDeleted=1 ORDER BY c.ClientId DESC
CREATE PROCEDURE `getClientById`(IN `ClientId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT c.ClientId, cg.GroupId, cg.GroupName, c.ClientName, c.ClientEmail, c.GstNumber, c.PanNumber, c.AdharNumber, c.ClientAddress, c.TypeOfEntity, c.CurrentStatus, c.AgreementStatus, c.IncorporationDate FROM client as c JOIN client_group as cg on c.GroupId=cg.GroupId WHERE c.IsDeleted=1 and c.ClientId=ClientId
CREATE PROCEDURE `updateClient`(IN `GroupId` BIGINT(15), IN `ClientName` VARCHAR(40), IN `ClientEmail` VARCHAR(50), IN `ClientCode` VARCHAR(30), IN `GstNumber` VARCHAR(20), IN `PanNumber` VARCHAR(20), IN `AdharNumber` VARCHAR(20), IN `ClientAddress` VARCHAR(200), IN `TypeOfEntity` VARCHAR(20), IN `CurrentStatus` VARCHAR(20), IN `AgreementStatus` VARCHAR(20), IN `IncorporationDate` DATETIME) NOT DETERMINISTIC NO SQL SQL SECURITY DEFINER UPDATE `client` SET `GroupId`= GroupId, `ClientName`= ClientName,`ClientEmail`= ClientEmail,`GstNumber`= GstNumber,`PanNumber`= PanNumber,`AdharNumber`= AdharNumber,`ClientAddress`= ClientAddress,`TypeOfEntity`= TypeOfEntity,`CurrentStatus`= CurrentStatus,`AgreementStatus`= AgreementStatus,`IncorporationDate`= IncorporationDate, `UpdatedDate` = CURRENT_TIMESTAMP() WHERE client.ClientId=ClientId
CREATE PROCEDURE `deleteClient`(IN `ClientId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `client` SET `IsDeleted`='0' WHERE client.ClientId=ClientId

CREATE PROCEDURE `updateClient`(IN `ClientId` BIGINT(15), IN `GroupId` BIGINT(15), IN `ClientName` VARCHAR(40), IN `ClientEmail` VARCHAR(50), IN `ClientCode` VARCHAR(30), IN `GstNumber` VARCHAR(20), IN `PanNumber` VARCHAR(20), IN `AdharNumber` VARCHAR(20), IN `ClientAddress` VARCHAR(200), IN `TypeOfEntity` VARCHAR(20), IN `CurrentStatus` VARCHAR(20), IN `AgreementStatus` VARCHAR(20), IN `IncorporationDate` DATETIME) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE client as c JOIN client_log as cg on c.ClientId=cg.ClientId SET c.GroupId=GroupId,cg.GroupId=GroupId,c.ClientName=ClientName, cg.ClientName=ClientName, c.ClientEmail=ClientEmail, cg.ClientEmail=ClientEmail, c.ClientCode=ClientCode, cg.ClientCode=ClientCode, c.GstNumber=GstNumber, cg.GstNumber=GstNumber,c.PanNumber=PanNumber,cg.PanNumber=PanNumber, c.AdharNumber=AdharNumber, cg.AdharNumber=AdharNumber, c.ClientAddress=ClientAddress, cg.ClientAddress=ClientAddress, c.TypeOfEntity=TypeOfEntity, cg.TypeOfEntity=TypeOfEntity, c.CurrentStatus=CurrentStatus, cg.CurrentStatus=CurrentStatus, c.AgreementStatus=AgreementStatus, cg.AgreementStatus=AgreementStatus, c.IncorporationDate=IncorporationDate, cg.IncorporationDate=IncorporationDate, c.UpdatedDate= CURRENT_TIMESTAMP(), cg.UpdatedDate= CURRENT_TIMESTAMP() WHERE c.ClientId=ClientId


Client Group:
DROP PROCEDURE `isGroupExits`; CREATE DEFINER=`root`@`localhost` PROCEDURE `isGroupExits`(IN `GroupName` VARCHAR(50), IN `GroupContact` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`GroupName` and `GroupContact`) as cnt FROM `client_group` WHERE client_group.GroupName=GroupName and client_group.GroupContact=GroupContact
CREATE PROCEDURE `insertGroup`(IN `GroupName` INT(50), IN `GroupShortName` INT(50), IN `GroupContact` INT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `client_group`( `GroupName`, `GroupShortName`, `GroupContact`,`CreatedDate`,`IsDeleted`) VALUES (GroupName, GroupShortName, GroupContact, now(), 1)
CREATE PROCEDURE `getAllGroup`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `GroupId`, `GroupName`, `GroupShortName`, `GroupContact` FROM `client_group` WHERE client_group.IsDeleted = 1 ORDER by client_group.GroupId DESC
CREATE PROCEDURE `getGroupById`(IN `GroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `GroupId`, `GroupName`, `GroupShortName`, `GroupContact` FROM `client_group` WHERE client_group.IsDeleted = 1 and client_group.GroupId=GroupId
CREATE PROCEDURE `updateGroup`(IN `GroupId` BIGINT(15), IN `GroupName` VARCHAR(50), IN `GroupShortName` VARCHAR(50), IN `GroupContact` INT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE client_group as cg JOIN client_group_log as cgl on cg.GroupId=cgl.GroupId set cg.GroupName=GroupName, cgl.GroupName=GroupName, cg.GroupContact=GroupContact, cgl.GroupContact=GroupContact, cg.UpdatedDate = CURRENT_TIMESTAMP(), cgl.UpdatedDate = CURRENT_TIMESTAMP() WHERE client_group.GroupId
CREATE PROCEDURE `deleteGroup`(IN `GroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `client_group` SET client_group.IsDeleted = 0 WHERE client_group.GroupId=GroupId

ClientGroupLog:
CREATE PROCEDURE `insertClientGroupLog`(IN `GroupId` BIGINT(15), IN `GroupName` VARCHAR(50), IN `GroupShortName` VARCHAR(50), IN `GroupContact` VARCHAR(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `client_group_log`(`GroupId`, `GroupName`, `GroupShortName`, `GroupContact`, `CreatedDate`, `IsDeleted`) VALUES (GroupId, GroupName, GroupShortName, GroupContact, now(), 1)


Client Contact :
CREATE PROCEDURE `isContactExits`(IN `ContactPersonName` VARCHAR(40), IN `Email` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`ContactPersonName` and `Email`) as cnt FROM `client_contact` WHERE client_contact.ContactPersonName=ContactPersonName and client_contact.Email=Email
CREATE PROCEDURE `insertContact`(IN `ClientId` BIGINT(15), IN `ContactPersonName` VARCHAR(40), IN `Email` VARCHAR(50), IN `Designation` VARCHAR(75), IN `MobileNumber1` VARCHAR(15), IN `MobileNumber2` VARCHAR(15), IN `Telephone` VARCHAR(20), IN `Address` VARCHAR(240), IN `Reference` VARCHAR(30), IN `CurrentStatus` VARCHAR(20), IN `IsBroadService` BOOLEAN) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `client_contact`(`ClientId`, `ContactPersonName`, `Email`, `Designation`, `MobileNumber1`, `MobileNumber2`, `Telephone`, `Address`, `Reference`, `CurrentStatus`, `IsBroadService`, `CreatedDate`, `IsDeleted`) VALUES (ClientId, ContactPersonName, Email, Designation, MobileNumber1, MobileNumber2, Telephone, Address, Reference, CurrentStatus, IsBroadService, now(),1)
CREATE PROCEDURE `getAllContact`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ContactId`, `ContactPersonName`, `Email`, `Designation`, `MobileNumber1`, `MobileNumber2`, `Telephone`, `Address`, `Reference`, `CurrentStatus` FROM `client_contact` WHERE client_contact.IsDeleted=1 ORDER by client_contact.ContactId DESC
CREATE PROCEDURE `getContactById`(IN `ContactId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ContactId`, `ContactPersonName`, `Email`, `Designation`, `MobileNumber1`, `MobileNumber2`, `Telephone`, `Address`, `Reference`, `CurrentStatus` FROM `client_contact` WHERE client_contact.IsDeleted=1 and client_contact.ContactId=ContactId
CREATE PROCEDURE `updateContact`(IN `ContactId` BIGINT(15), IN `ClientId` BIGINT(15), IN `ContactPersonName` VARCHAR(40), IN `Email` VARCHAR(50), IN `Designation` VARCHAR(75), IN `MobileNumber1` VARCHAR(15), IN `MobileNumber2` VARCHAR(15), IN `Telephone` VARCHAR(20), IN `Address` VARCHAR(240), IN `Reference` VARCHAR(30), IN `CurrentStatus` VARCHAR(20), IN `IsBroadService` BOOLEAN) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE client_contact as cc JOIN client_contact_log as ccl on cc.ContactId=ccl.ContactId SET cc.ClientId=ClientId, ccl.ClientId=ClientId, cc.ContactPersonName=ContactPersonName, ccl.ContactPersonName=ContactPersonName, cc.Email=Email, ccl.Email=Email, cc.Designation=Designation, ccl.Designation=Designation, cc.MobileNumber1=MobileNumber1, ccl.MobileNumber1=MobileNumber1, cc.MobileNumber2=MobileNumber2, ccl.MobileNumber2=MobileNumber2, cc.Telephone=Telephone, ccl.Telephone=Telephone, cc.Address=Address, ccl.Address=Address, cc.Reference=Reference, ccl.Reference=Reference, cc.CurrentStatus=CurrentStatus, ccl.CurrentStatus=CurrentStatus, cc.IsBroadService=IsBroadService, ccl.IsBroadService=IsBroadService, cc.UpdatedDate = CURRENT_TIMESTAMP(), ccl.UpdatedDate = CURRENT_TIMESTAMP() WHERE cc.ContactId=ContactId
CREATE PROCEDURE `deleteContact`(IN `ContactId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `client_contact` SET client_contact.IsDeleted = 0 WHERE client_contact.ContactId=ContactId

Client Contact Log:
DROP PROCEDURE `insertContactLog`; CREATE DEFINER=`root`@`localhost` PROCEDURE `insertContactLog`(IN `ContactId` BIGINT(15), IN `ClientId` BIGINT(15), IN `ContactPersonName` VARCHAR(40), IN `Email` VARCHAR(50), IN `Designation` VARCHAR(75), IN `MobileNumber1` VARCHAR(15), IN `MobileNumber2` VARCHAR(15), IN `Telephone` VARCHAR(20), IN `Address` VARCHAR(240), IN `Reference` VARCHAR(30), IN `CurrentStatus` VARCHAR(20), IN `IsBroadService` BOOLEAN) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `client_contact_log` (`ContactId`, `ClientId`, `ContactPersonName`, `Email`, `Designation`, `MobileNumber1`, `MobileNumber2`, `Telephone`, `Address`, `Reference`, `CurrentStatus`, `IsBroadService`,`CreatedDate`,`IsDeleted`) VALUES (ContactId, ClientId, ContactPersonName, Email, Designation, MobileNumber1, MobileNumber2, Telephone, Address, Reference, CurrentStatus, IsBroadService, now(), 1)

Service Group:
CREATE PROCEDURE `isServiceGroupExits`(IN `ServiceGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`ServiceGroupName`) as cnt FROM `service_group` WHERE service_group.ServiceGroupName=ServiceGroupName
CREATE PROCEDURE `addServiceGroup`(IN `ServiceGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_group`( `ServiceGroupName`,`CreatedDate`,`IsDeleted`) VALUES (ServiceGroupName, now(), 1)
CREATE PROCEDURE `getAllServiceGroup`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServiceGroupId`, `ServiceGroupName` FROM `service_group` WHERE service_group.IsDeleted = 1 ORDER by service_group.ServiceGroupId DESC
CREATE PROCEDURE `getServiceGroupById`(IN `ServiceGroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServiceGroupId`, `ServiceGroupName` FROM `service_group` WHERE service_group.IsDeleted = 1 and service_group.ServiceGroupId = ServiceGroupId
CREATE PROCEDURE `updateServiceGroup`(IN `ServiceGroupId` BIGINT(15), IN `ServiceGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE service_group as sg JOIN service_group_log as sgl on sg.ServiceGroupId=sgl.ServiceGroupId SET sg.ServiceGroupName=ServiceGroupName, sgl.ServiceGroupName=ServiceGroupName, sg.UpdatedDate = CURRENT_TIMESTAMP(), sgl.UpdatedDate = CURRENT_TIMESTAMP() WHERE sg.ServiceGroupId=ServiceGroupId
CREATE PROCEDURE `deleteServiceGroup`(IN `ServiceGroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `service_group` SET service_group.IsDeleted = 0 WHERE service_group.ServiceGroupId=ServiceGroupId


Service Group Log:
CREATE PROCEDURE `addServiceGroupLog`(IN `ServiceGroupId` BIGINT(15), IN `ServiceGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_group_log` (`ServiceGroupId`, `ServiceGroupName`, `CreatedDate`, `IsDeleted`) VALUES (ServiceGroupId, ServiceGroupName, now(), 1)

Service SubGroup :
CREATE PROCEDURE `isSubServiceGroupExits`(IN `ServiceSubGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`ServiceSubGroupName`) as cnt FROM `service_sub_group` WHERE service_sub_group.ServiceSubGroupName=ServiceSubGroupName
CREATE PROCEDURE `addSubServiceGroup`(IN `ServiceSubGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_sub_group`(`ServiceSubGroupName`, `CreatedDate`, `IsDeleted`) VALUES (ServiceSubGroupName, now(), 1)
CREATE PROCEDURE `getAllSubServiceGroup`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServiceSubGroupId`, `ServiceSubGroupName` FROM `service_sub_group` WHERE service_sub_group.IsDeleted = 1 ORDER by service_sub_group.ServiceSubGroupId DESC
CREATE PROCEDURE `getSubServiceGroupById`(IN `ServiceSubGroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServiceSubGroupId`, `ServiceSubGroupName` FROM `service_sub_group` WHERE service_sub_group.IsDeleted = 1 and service_sub_group.ServiceSubGroupId=ServiceSubGroupId
CREATE PROCEDURE `updateSubServiceGroup`(IN `ServiceSubGroupId` BIGINT(15), IN `ServiceSubGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE service_sub_group as ssg JOIN service_sub_group_log as ssgl on ssg.ServiceSubGroupId=ssgl.ServiceSubGroupId SET ssg.ServiceSubGroupName=ServiceSubGroupName, ssgl.ServiceSubGroupName=ServiceSubGroupName, ssg.UpdatedDate = CURRENT_TIMESTAMP(), ssgl.UpdatedDate = CURRENT_TIMESTAMP() WHERE ssg.ServiceSubGroupId=ServiceSubGroupId
CREATE PROCEDURE `deleteSubServiceGroup`(IN `ServiceSubGroupId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `service_sub_group` SET service_sub_group.IsDeleted = 0 WHERE service_sub_group.ServiceSubGroupId=ServiceSubGroupId


Service SubGroup Log:
CREATE PROCEDURE `addSubServiceGroupLog`(IN `ServiceSubGroupId` BIGINT(15), IN `ServiceSubGroupName` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_sub_group_log` (`ServiceSubGroupId`, `ServiceSubGroupName`, `CreatedDate`, `IsDeleted`) VALUES (ServiceSubGroupId, ServiceSubGroupName, now(), 1)

Service Pay Type:
CREATE PROCEDURE `isPaytypeExits`(IN `ModeOfPayment` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`ModeOfPayment`) as cnt FROM `service_pay_type` WHERE service_pay_type.ModeOfPayment=ModeOfPayment
CREATE PROCEDURE `insertPaytype`(IN `ModeOfPayment` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_pay_type`( `ModeOfPayment`,`CreatedDate`,`IsDeleted`) VALUES (ModeOfPayment, now(), 1)
CREATE PROCEDURE `getAllPaytype`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `PayTypeId`, `ModeOfPayment` FROM `service_pay_type` WHERE service_pay_type.IsDeleted = 1 ORDER by service_pay_type.PayTypeId DESC
CREATE PROCEDURE `getPaytypeById`(IN `PayTypeId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `PayTypeId`, `ModeOfPayment` FROM `service_pay_type` WHERE service_pay_type.IsDeleted = 1 and service_pay_type.PayTypeId=PayTypeId
CREATE PROCEDURE `updatePaytype`(IN `PayTypeId` BIGINT(15), IN `ModeOfPayment` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE service_pay_type as spt JOIN service_pay_type_log as sptl on spt.PayTypeId=sptl.PayTypeId set spt.ModeOfPayment=ModeOfPayment, sptl.ModeOfPayment=ModeOfPayment, spt.UpdatedDate = CURRENT_TIMESTAMP(), sptl.UpdatedDate = CURRENT_TIMESTAMP() WHERE spt.PayTypeId=PayTypeId
CREATE PROCEDURE `deletePaytype`(IN `PayTypeId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `service_pay_type` SET service_pay_type.IsDeleted = 0 WHERE service_pay_type.PayTypeId=PayTypeId

Service Pay Type Log:
CREATE PROCEDURE `insertPaytypeLog`(IN `PayTypeId` BIGINT(15), IN `ModeOfPayment` VARCHAR(50)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_pay_type_log`(`PayTypeId`, `ModeOfPayment`, `CreatedDate`, `IsDeleted`) VALUES (PayTypeId, ModeOfPayment, now(), 1)

Service Pay:
CREATE PROCEDURE `isPayExits`(IN `DefaultAmount` DECIMAL(10,2), IN `PeriodOfService` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT COUNT(`DefaultAmount` and `PeriodOfService`) as cnt FROM `service_pay` WHERE service_pay.DefaultAmount=DefaultAmount and service_pay.PeriodOfService=PeriodOfService
CREATE PROCEDURE `insertServicePay`(IN `DefaultAmount` DECIMAL(10,2), IN `PeriodOfService` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_pay`( `DefaultAmount`, `PeriodOfService`,`CreatedDate`,`IsDeleted`) VALUES (DefaultAmount, PeriodOfService, now(), 1)
CREATE PROCEDURE `getAllServicePay`() NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServicePayId`, `DefaultAmount`, `PeriodOfService` FROM `service_pay` WHERE service_pay.IsDeleted = 1 ORDER by service_pay.ServicePayId DESC
CREATE PROCEDURE `getServicePayById`(IN `ServicePayId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER SELECT `ServicePayId`, `DefaultAmount`, `PeriodOfService` FROM `service_pay` WHERE service_pay.IsDeleted = 1 and service_pay.ServicePayId=ServicePayId
CREATE PROCEDURE `updateServicePay`(IN `ServicePayId` BIGINT(15), IN `DefaultAmount` DECIMAL(10,2), IN `PeriodOfService` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE service_pay as sp JOIN service_pay_log as spl on sp.ServicePayId=spl.ServicePayId SET sp.DefaultAmount=DefaultAmount, spl.DefaultAmount=DefaultAmount, sp.PeriodOfService=PeriodOfService, spl.PeriodOfService=PeriodOfService, sp.UpdatedDate = CURRENT_TIMESTAMP(), spl.UpdatedDate = CURRENT_TIMESTAMP() WHERE sp.ServicePayId=ServicePayId
CREATE PROCEDURE `deleteServicePay`(IN `ServicePayId` BIGINT(15)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `service_pay` SET service_pay.IsDeleted = 0 WHERE service_pay.ServicePayId=ServicePayId



Service Pay Log:
CREATE PROCEDURE `insertServicePayLog`(IN `ServicePayId` BIGINT(15), IN `DefaultAmount` DECIMAL(10,2), IN `PeriodOfService` VARCHAR(30)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `service_pay_log`(`ServicePayId`, `DefaultAmount`, `PeriodOfService`, `CreatedDate`, `IsDeleted`) VALUES (ServicePayId, DefaultAmount, PeriodOfService, now(), 1)


